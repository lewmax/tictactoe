plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    throw new GradleException("versionCode not found. Define flutter.versionCode in the local.properties file.")
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    throw new GradleException("versionName not found. Define flutter.versionName in the local.properties file.")
}

def devKeystorePropertiesFile = rootProject.file("android/app/development_key.properties")
def prodKeystorePropertiesFile = rootProject.file("android/app/production_key.properties")
def devKeystoreProperties = new Properties()
def prodKeystoreProperties = new Properties()

if (devKeystorePropertiesFile.exists()) {
    devKeystoreProperties.load(new FileInputStream(devKeystorePropertiesFile))
}

if (prodKeystorePropertiesFile.exists()) {
    prodKeystoreProperties.load(new FileInputStream(prodKeystorePropertiesFile))
}

android {
    namespace = "com.example.chat_app"
    compileSdk 35
    ndkVersion '25.1.8937393'

    signingConfigs {
        dev {
            keyAlias devKeystoreProperties['keyAlias']
            keyPassword devKeystoreProperties['keyPassword']
            storeFile devKeystoreProperties['storeFile'] ? rootProject.file(devKeystoreProperties['storeFile']) : null
            storePassword devKeystoreProperties['storePassword']
        }
        prod {
            keyAlias prodKeystoreProperties['keyAlias']
            keyPassword prodKeystoreProperties['keyPassword']
            storeFile prodKeystoreProperties['storeFile'] ? rootProject.file(prodKeystoreProperties['storeFile']) : null
            storePassword prodKeystoreProperties['storePassword']
        }
    }

    flavorDimensions "app"
    productFlavors {
        dev {
            dimension "app"
            applicationId "com.example.chat_app"
            resValue "string", "app_name", "chat_app dev"
            signingConfig signingConfigs.dev
        }
        prod {
            dimension "app"
            applicationId "com.example.chat_app"
            resValue "string", "app_name", "chat_app"
            signingConfig signingConfigs.prod
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.chat_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdkVersion 23
        targetSdkVersion 34
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.24"
    implementation 'androidx.window:window:1.3.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'
    implementation("androidx.multidex:multidex:2.0.1")
    // Required for all Android apps:
	implementation 'io.branch.sdk.android:library:5.15.0' // Check for latest version before hard-coding
	implementation 'store.galaxy.samsung.installreferrer:samsung_galaxystore_install_referrer:4.0.0'
	// Required if your app is in the Google Play Store (tip: avoid using bundled play services libs):
	implementation 'com.google.android.gms:play-services-ads-identifier:18.2.0'
	// Alternatively, use the following lib for getting the AAID:
	// implementation 'com.google.android.gms:play-services-ads:17.2.0'
}


